package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import AirCrash.Air.Journey;
import mappers.IMapResultSetIntoEntity;
import repositories.IJourneyRepository;
import uow.IUnitOfWork;

public class JourneyRepository extends RepositoryBase<Journey>
implements IJourneyRepository{

    private PreparedStatement getTrack;
    private PreparedStatement getDate;
    private PreparedStatement getTickets;
    private PreparedStatement getExpectedDuration;

	public JourneyRepository(Connection connection,
			IMapResultSetIntoEntity<Journey> mapper, IUnitOfWork uow) {
		super(connection,mapper, uow);

		try{
		    getTrack = connection.prepareStatement(getTrackSql());
		    getDate = connection.prepareStatement(getDateSql());
		    getTickets = connection.prepareStatement(getTicketsSql());
		    getExpectedDuration = connection.prepareStatement(getExpectedDurationSql());
        }catch(SQLException e){
		    e.printStackTrace();
        }

	}
	
	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE journey("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "track varchar(20)," + "date Date," +"tickets int," + "expectedDuration int" + ")";
	}

	@Override
	protected String tableName() {
		return "journey";
	}

	protected String insertSql() {
		return "INSERT INTO journey(track, date,  tickets, expectedDuration) VALUES (?,?,?,?)";
	}

	protected String updateSql() {
		return "UPDATE journey SET (track, date,  tickets, expectedDuration)=(?,?,?,?) WHERE id=?";
	}

	protected String getTrackSql(){return "SELECT * FROM journey where track = ?";}
	protected String getDateSql(){return "SELECT * FROM journey where date = ?";}
	protected String getTicketsSql(){return "SELECT * FROM journey where tickets = ?";}
	protected String getExpectedDurationSql(){return "SELECT * FROM journey where ExpectedDuration = ?";}


	@Override
	protected void setUpdate(Journey entity) throws SQLException {
		update.setString(1, entity.getTrack());
		update.setDate(2, (Date)entity.getDate());
		update.setInt(3, entity.getTickets());
		update.setDouble(4, entity.getExpectedDuration());
		
	}

	@Override
	protected void setInsert(Journey entity) throws SQLException {
		insert.setString(1, entity.getTrack());
		System.err.println(entity.getDate());
		insert.setDate(2, entity.getDate());
		insert.setInt(3, entity.getTickets());
		insert.setDouble(4, entity.getExpectedDuration());
	}



    private List<Journey> searchBy(String value){
        List<Journey> journey = new ArrayList<Journey>();
        try{
            getTrack.setString(1,value);
            ResultSet resultSet = getTrack.executeQuery();
            while(resultSet.next()){
                journey.add(mapper.map(resultSet));
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return journey;
    }

    public List<Journey> withTrack(String track) {
        return searchBy(track);
    }
    
    private List<Journey> searchBy(Date value){
        List<Journey> journey = new ArrayList<Journey>();
        try{
            getTrack.setDate(1,value);
            ResultSet resultSet = getTrack.executeQuery();
            while(resultSet.next()){
                journey.add(mapper.map(resultSet));
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return journey;
    }

	public List<Journey> withDate(Date Date) {
		return searchBy(Date);
	}

    private List<Journey> searchBy(int value){
        List<Journey> journey = new ArrayList<Journey>();
        try{
            getTrack.setInt(1,value);
            ResultSet resultSet = getTrack.executeQuery();
            while(resultSet.next()){
                journey.add(mapper.map(resultSet));
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return journey;
    }

	public List<Journey> withTickets(int tickets) {
		return searchBy(tickets);
	}

	public List<Journey> withExpectedDuration(int expectedDuration) {
		return searchBy(expectedDuration);
	}


}
