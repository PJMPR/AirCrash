package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import AirCrash.Air.Customer;
import mappers.IMapResultSetIntoEntity;
import repositories.ICustomerRepository;
import uow.IUnitOfWork;

public class CustomerRepository extends RepositoryBase<Customer> implements ICustomerRepository{

    private PreparedStatement getName;
    private PreparedStatement getSurname;

	public CustomerRepository(Connection connection,
			IMapResultSetIntoEntity<Customer> mapper, IUnitOfWork uow) {
		super(connection,mapper, uow);

		try{
		    getName = connection.prepareStatement(getNameSql());
		    getSurname = connection.prepareStatement(getSurNameSql());
        }catch(SQLException e){
		    e.printStackTrace();
        }

	}
	
	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE customer("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "name varchar(20)," + "surname varchar(50)" + ")";
	}

	@Override
	protected String tableName() {
		return "customer";
	}

	protected String insertSql() {
		return "INSERT INTO customer(name, surname) VALUES (?,?)";
	}

	protected String updateSql() {
		return "UPDATE customer SET (name, surname)=(?,?) WHERE id=?";
	}

	protected String getNameSql(){return "SELECT * FROM customer where name = ?";}
	protected String getSurNameSql(){return "SELECT * FROM customer where surName=?";}


	@Override
	protected void setUpdate(Customer entity) throws SQLException {
		update.setString(1, entity.getName());
		update.setString(2, entity.getSurname());
		
	}

	@Override
	protected void setInsert(Customer entity) throws SQLException {
		insert.setString(1, entity.getName());
		insert.setString(2, entity.getSurname());
	}



    private List<Customer> searchBy(String value){
        List<Customer> customer = new ArrayList<Customer>();
        try{
            getName.setString(1,value);
            ResultSet resultSet = getName.executeQuery();
            while(resultSet.next()){
                customer.add(mapper.map(resultSet));
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return customer;
    }

    public List<Customer> withName(String name) {
        return searchBy(name);
    }


    public List<Customer> withSurname(String surname) {
        return searchBy(surname);
    }

}